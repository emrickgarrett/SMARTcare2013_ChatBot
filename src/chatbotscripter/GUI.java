/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package chatbotscripter;

import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Scanner;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JList;
import javax.swing.JOptionPane;

/**
 *
 * @author Garrett
 * 
 * This is the main GUI for the application, if this exits, the application will end
 */
public class GUI extends javax.swing.JFrame {

    /**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();
        loadData();
        this.setResizable(false);
        this.setLocationRelativeTo(null);
        
        //Set up MouseListener for the lists.
        
        //QuestionList Listener, determines what happens when the list is clicked
        MouseListener questionMouseListener = new MouseAdapter(){
            
            @Override
            public void mouseClicked(MouseEvent mouseEvent){
                QuestionList  = (JList) mouseEvent.getSource();
                
                //If the list is clicked once
                if(mouseEvent.getClickCount() == 1){
                    lastFieldClicked = 1;
                }
                
                //If a list item is double clicked
                if(mouseEvent.getClickCount() == 2){
                    int index = QuestionList.locationToIndex(mouseEvent.getPoint());
                    creatingNewQuestion = false;
                    lastSelectedQuestionIndex = index;
                    if(index >= 0){
                        String s = (String) QuestionList.getModel().getElementAt(index);
                        System.out.println("Double-Clicked on: " + s);
                        editQuestion.setSize(325, 300);
                        editQuestion.setResizable(false);
                        editQuestion.setLocationRelativeTo(null);
                        editQuestion.setTitle("Edit Your Question");
                        editQuestion.setVisible(true);
                        setEditQuestionFields(index);
                    }
                }
            }
        };
        
        QuestionList.addMouseListener(questionMouseListener);
        
        //Answer Listen listener, determines what happens when the answer list is clicked
        MouseListener answerMouseListener = new MouseAdapter(){
            
            @Override
            public void mouseClicked(MouseEvent mouseEvent){
                AnswerList  = (JList) mouseEvent.getSource();
                
                //What happens if the list is clicked once
                if(mouseEvent.getClickCount() == 1){
                    lastFieldClicked = 2;
                }
                
                //What happens if the list is clicked twice
                if(mouseEvent.getClickCount() == 2){
                    int index = AnswerList.locationToIndex(mouseEvent.getPoint());
                    creatingNewAnswer = false;
                    lastSelectedAnswerIndex = index;
                    if(index >= 0){
                        String s = (String) AnswerList.getModel().getElementAt(index);
                        System.out.println("Double-Clicked on: " + s);
                        editAnswer.setSize(255,200);
                        editAnswer.setResizable(false);
                        editAnswer.setLocationRelativeTo(null);
                        editAnswer.setTitle("Edit Your Answer");
                        editAnswer.setVisible(true);
                        setEditAnswerFields(index);
                    }
                }
            }
        };
        
        AnswerList.addMouseListener(answerMouseListener);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu3 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        jFileChooser1 = new javax.swing.JFileChooser();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        editQuestion = new javax.swing.JFrame();
        jLabel2 = new javax.swing.JLabel();
        questionEditField = new javax.swing.JTextField();
        responseCheckBox = new javax.swing.JCheckBox();
        saveQuestion = new javax.swing.JButton();
        cancelQuestionSave = new javax.swing.JButton();
        editNewQuestionButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jMenuItem1 = new javax.swing.JMenuItem();
        editAnswer = new javax.swing.JFrame();
        jLabel3 = new javax.swing.JLabel();
        answerEditField = new javax.swing.JTextField();
        answerSaveButton = new javax.swing.JButton();
        answerNewButton = new javax.swing.JButton();
        answerCancelButton = new javax.swing.JButton();
        botInfo = new javax.swing.JFrame();
        botInfoNameLabel = new javax.swing.JLabel();
        infoLabel1 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jTextField5 = new javax.swing.JTextField();
        jTextField6 = new javax.swing.JTextField();
        jTextField7 = new javax.swing.JTextField();
        jTextField8 = new javax.swing.JTextField();
        botPersonality = new javax.swing.JFrame();
        QuestionLabel = new javax.swing.JLabel();
        AnswerLabel = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        AnswerList = new javax.swing.JList();
        NewQuestion = new javax.swing.JButton();
        NewAnswer = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        QuestionList = new javax.swing.JList();
        linkButton = new javax.swing.JButton();
        unlinkButton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        FileMenu = new javax.swing.JMenu();
        loadBot = new javax.swing.JMenuItem();
        saveBot = new javax.swing.JMenuItem();
        createBot = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        exit = new javax.swing.JMenuItem();
        botOptions = new javax.swing.JMenu();
        informationMenuItem = new javax.swing.JMenuItem();
        personalityMenuItem = new javax.swing.JMenuItem();
        testRunMenuItem = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        Help = new javax.swing.JMenu();
        aboutMenuItem = new javax.swing.JMenuItem();
        usageMenuItem = new javax.swing.JMenuItem();
        contactsMenuItem = new javax.swing.JMenuItem();
        FAQMenuItem = new javax.swing.JMenuItem();

        jMenu3.setText("File");
        jMenuBar2.add(jMenu3);

        jMenu4.setText("Edit");
        jMenuBar2.add(jMenu4);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jLabel2.setText("Question Editor");

        questionEditField.setText("Question Goes Here.");
        questionEditField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                questionEditFieldActionPerformed(evt);
            }
        });

        responseCheckBox.setText("Is a Response?");
        responseCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                responseCheckBoxActionPerformed(evt);
            }
        });

        saveQuestion.setText("Save");
        saveQuestion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveQuestionActionPerformed(evt);
            }
        });

        cancelQuestionSave.setText("Cancel");
        cancelQuestionSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelQuestionSaveActionPerformed(evt);
            }
        });

        editNewQuestionButton.setText("New");
        editNewQuestionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editNewQuestionButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout editQuestionLayout = new javax.swing.GroupLayout(editQuestion.getContentPane());
        editQuestion.getContentPane().setLayout(editQuestionLayout);
        editQuestionLayout.setHorizontalGroup(
            editQuestionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editQuestionLayout.createSequentialGroup()
                .addGroup(editQuestionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(editQuestionLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(editQuestionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(questionEditField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(editQuestionLayout.createSequentialGroup()
                                .addGroup(editQuestionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(responseCheckBox)
                                    .addComponent(jLabel2))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(editQuestionLayout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(saveQuestion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(editNewQuestionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cancelQuestionSave, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        editQuestionLayout.setVerticalGroup(
            editQuestionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editQuestionLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(questionEditField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(responseCheckBox)
                .addGap(13, 13, 13)
                .addGroup(editQuestionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(editNewQuestionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cancelQuestionSave, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(saveQuestion, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        jLabel1.setText("jLabel1");

        jMenuItem1.setText("jMenuItem1");

        jLabel3.setText("Answer Editor");

        answerEditField.setText("Answer Goes Here");

        answerSaveButton.setText("Save");
        answerSaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                answerSaveButtonActionPerformed(evt);
            }
        });

        answerNewButton.setText("New");
        answerNewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                answerNewButtonActionPerformed(evt);
            }
        });

        answerCancelButton.setText("Cancel");
        answerCancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                answerCancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout editAnswerLayout = new javax.swing.GroupLayout(editAnswer.getContentPane());
        editAnswer.getContentPane().setLayout(editAnswerLayout);
        editAnswerLayout.setHorizontalGroup(
            editAnswerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editAnswerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(editAnswerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(answerEditField)
                    .addGroup(editAnswerLayout.createSequentialGroup()
                        .addGroup(editAnswerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(editAnswerLayout.createSequentialGroup()
                                .addComponent(answerSaveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(answerNewButton, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(answerCancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel3))
                        .addGap(0, 1, Short.MAX_VALUE)))
                .addContainerGap())
        );
        editAnswerLayout.setVerticalGroup(
            editAnswerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editAnswerLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(answerEditField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                .addGroup(editAnswerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(answerCancelButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(answerNewButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(answerSaveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32))
        );

        botInfoNameLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        botInfoNameLabel.setText("Bot Name Goes Here");

        infoLabel1.setText("Info 1:");

        jLabel6.setText("Info 2:");

        jLabel7.setText("Info 3:");

        jLabel8.setText("Info 4:");

        jLabel9.setText("Info 5:");

        jLabel10.setText("Info 6:");

        jLabel11.setText("Info 7:");

        jLabel12.setText("Info 8:");

        jTextField1.setText("Information Slot 1");

        jTextField2.setText("Information Slot 2");

        jTextField3.setText("Information Slot 3");

        jTextField4.setText("Information Slot 4");

        jTextField5.setText("Information Slot 5");

        jTextField6.setText("Information Slot 6");

        jTextField7.setText("Information Slot 7");

        jTextField8.setText("Information Slot 8");

        javax.swing.GroupLayout botInfoLayout = new javax.swing.GroupLayout(botInfo.getContentPane());
        botInfo.getContentPane().setLayout(botInfoLayout);
        botInfoLayout.setHorizontalGroup(
            botInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(botInfoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(botInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(botInfoNameLabel)
                    .addGroup(botInfoLayout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(botInfoLayout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(botInfoLayout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(botInfoLayout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(botInfoLayout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(botInfoLayout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(botInfoLayout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(botInfoLayout.createSequentialGroup()
                        .addComponent(infoLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(163, 163, 163))
        );
        botInfoLayout.setVerticalGroup(
            botInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(botInfoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(botInfoNameLabel)
                .addGap(18, 18, 18)
                .addGroup(botInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(infoLabel1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(botInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(botInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(botInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(botInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(botInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(botInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(botInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(52, 52, 52))
        );

        javax.swing.GroupLayout botPersonalityLayout = new javax.swing.GroupLayout(botPersonality.getContentPane());
        botPersonality.getContentPane().setLayout(botPersonalityLayout);
        botPersonalityLayout.setHorizontalGroup(
            botPersonalityLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        botPersonalityLayout.setVerticalGroup(
            botPersonalityLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        QuestionLabel.setText("Questions");

        AnswerLabel.setText("Answers");

        AnswerList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane3.setViewportView(AnswerList);

        NewQuestion.setText("New Question");
        NewQuestion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NewQuestionActionPerformed(evt);
            }
        });

        NewAnswer.setText("New Answer");
        NewAnswer.setMaximumSize(new java.awt.Dimension(99, 23));
        NewAnswer.setMinimumSize(new java.awt.Dimension(99, 23));
        NewAnswer.setPreferredSize(new java.awt.Dimension(99, 23));
        NewAnswer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NewAnswerActionPerformed(evt);
            }
        });

        QuestionList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane4.setViewportView(QuestionList);

        linkButton.setText("Link");
        linkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                linkButtonActionPerformed(evt);
            }
        });

        unlinkButton.setText("Unlink");
        unlinkButton.setMaximumSize(new java.awt.Dimension(51, 23));
        unlinkButton.setMinimumSize(new java.awt.Dimension(51, 23));
        unlinkButton.setPreferredSize(new java.awt.Dimension(51, 23));
        unlinkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unlinkButtonActionPerformed(evt);
            }
        });

        FileMenu.setText("File");

        loadBot.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
        loadBot.setText("Load Bot");
        loadBot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadBotActionPerformed(evt);
            }
        });
        FileMenu.add(loadBot);

        saveBot.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveBot.setText("Save Bot");
        saveBot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBotActionPerformed(evt);
            }
        });
        FileMenu.add(saveBot);

        createBot.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        createBot.setText("Create Bot");
        createBot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createBotActionPerformed(evt);
            }
        });
        FileMenu.add(createBot);
        FileMenu.add(jSeparator1);

        exit.setText("Exit");
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });
        FileMenu.add(exit);

        jMenuBar1.add(FileMenu);

        botOptions.setText("Bot");

        informationMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.CTRL_MASK));
        informationMenuItem.setText("Information");
        informationMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                informationMenuItemActionPerformed(evt);
            }
        });
        botOptions.add(informationMenuItem);

        personalityMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        personalityMenuItem.setText("Personality");
        personalityMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                personalityMenuItemActionPerformed(evt);
            }
        });
        botOptions.add(personalityMenuItem);

        testRunMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        testRunMenuItem.setText("Test Run");
        testRunMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testRunMenuItemActionPerformed(evt);
            }
        });
        botOptions.add(testRunMenuItem);

        jMenuBar1.add(botOptions);

        jMenu2.setText("Options");
        jMenuBar1.add(jMenu2);

        Help.setText("Help");

        aboutMenuItem.setText("About");
        Help.add(aboutMenuItem);

        usageMenuItem.setText("Usage");
        Help.add(usageMenuItem);

        contactsMenuItem.setText("Contacts");
        Help.add(contactsMenuItem);

        FAQMenuItem.setText("FAQ");
        Help.add(FAQMenuItem);

        jMenuBar1.add(Help);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(QuestionLabel)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(NewQuestion)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(linkButton, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(AnswerLabel)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(unlinkButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                        .addComponent(NewAnswer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(QuestionLabel)
                    .addComponent(AnswerLabel))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 310, Short.MAX_VALUE)
                    .addComponent(jScrollPane4))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NewQuestion)
                    .addComponent(NewAnswer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(linkButton)
                    .addComponent(unlinkButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(28, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * When the user chooses to load a bot
     * @param evt 
     */
    private void loadBotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadBotActionPerformed
        //Load a bot
        System.out.println("Loading!");
        editQuestion.setVisible(false);
        editAnswer.setVisible(false);
        botInfo.setVisible(false);
        
        //Open a JFileChooser to determine which File it'll select
        int test = jFileChooser1.showOpenDialog(this);
        if(test == JFileChooser.APPROVE_OPTION){
            File file = jFileChooser1.getSelectedFile();
            File otherFile = null;
            String filePath = file.getAbsolutePath();
            String otherPath = filePath.substring(0, filePath.lastIndexOf("\\"));
            String otherName ="";
            System.out.println(otherPath);
            
            //Determine the bots name based on the File's name, and load the files
            String fileName = file.getName();
            if(fileName.contains("Answers")){
                System.out.println("Answers");
                otherName = file.getName().substring(0,file.getName().indexOf("Answers")) + "Questions.txt";
                botName = file.getName().substring(0, file.getName().indexOf("Answers"));
                System.out.println(otherName);
                aFile = file;
                qFile = new File(otherName);
            }else if(fileName.contains("Questions")){
                System.out.println("Questions");
                otherName = file.getName().substring(0,file.getName().indexOf("Questions")) + "Answers.txt";
                botName = file.getName().substring(0, file.getName().indexOf("Questions"));
                System.out.println(otherName);
                qFile = file;
                aFile = new File(otherName);
            }
            
            //If there is no name, or if something goes wrong
            if(botName == null || botName.equals("")){
                botName = "Charles";
            }
            
            //System.out.println("Selected file was " + file.getName());
            //System.out.println("The matching file is " + otherName);
            //System.out.println("FilePath: " + file.getAbsolutePath());
            
            loadData();
        }
    }//GEN-LAST:event_loadBotActionPerformed

    /**
     * When the user decides to save a bot
     * @param evt 
     */
    private void saveBotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveBotActionPerformed
        //Save a bot
        System.out.println("Saving!");
        creatingNewQuestion = false;
        creatingNewAnswer = false;
        saveBot();
    }//GEN-LAST:event_saveBotActionPerformed

    /**
     * When the user decides to exit the application (without using the X button)
     * @param evt 
     */
    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
        //Exit
        System.exit(0);
    }//GEN-LAST:event_exitActionPerformed

    /**
     * When the user decides to create a new Question
     * @param evt 
     */
    private void NewQuestionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NewQuestionActionPerformed
        setEditQuestionFields(-1);
        editQuestion.setVisible(true);
        editQuestion.setSize(325, 300);
        editQuestion.setLocationRelativeTo(null);
        editQuestion.setResizable(false);
        editQuestion.setTitle("Edit Your Question");
        creatingNewQuestion = true;
    }//GEN-LAST:event_NewQuestionActionPerformed

    /**
     * When the user decides to create a new Answer
     * @param evt 
     */
    private void NewAnswerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NewAnswerActionPerformed
        //New Answer
        setEditAnswerFields(-1);
        editAnswer.setVisible(true);
        editAnswer.setSize(255, 200);
        editAnswer.setLocationRelativeTo(null);
        editAnswer.setResizable(false);
        editAnswer.setTitle("Edit Your Answer");
        creatingNewAnswer = true;
    }//GEN-LAST:event_NewAnswerActionPerformed

    /**
     * What happens when they edit the Questions text (Nothing atm)
     * @param evt 
     */
    private void questionEditFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_questionEditFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_questionEditFieldActionPerformed

    /**
     * Toggles whether or not the Question should be a Response, (Nothing atm)
     * @param evt 
     */
    private void responseCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_responseCheckBoxActionPerformed
        // Check box for edit question to determin if it's a response
    }//GEN-LAST:event_responseCheckBoxActionPerformed

    /**
     * When the user decides to save the Question
     * @param evt 
     */
    private void saveQuestionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveQuestionActionPerformed
        addQuestion();
        creatingNewQuestion = false;
    }//GEN-LAST:event_saveQuestionActionPerformed

    /**
     * When the user decides to Edit a new question
     * @param evt 
     */
    private void editNewQuestionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editNewQuestionButtonActionPerformed
        setEditQuestionFields(-1);
        editQuestion.setVisible(true);
        editQuestion.setSize(325, 300);
        editQuestion.setLocationRelativeTo(null);
        editQuestion.setResizable(false);
        editQuestion.setTitle("Edit Your Question");
        creatingNewQuestion = true;
    }//GEN-LAST:event_editNewQuestionButtonActionPerformed

    /**
     * When the user decides to cancel the editing of a question
     * @param evt 
     */
    private void cancelQuestionSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelQuestionSaveActionPerformed
        // Cancel for Edit Question box
        editQuestion.setVisible(false);
        creatingNewQuestion = false;
    }//GEN-LAST:event_cancelQuestionSaveActionPerformed

    /**
     * When the user wants to create a bot 
     * @param evt 
     */
    private void createBotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createBotActionPerformed
        // TODO add your handling code here:
        createBot();
        
    }//GEN-LAST:event_createBotActionPerformed

    /**
     * When the user wants to display and edit the bots information
     * @param evt 
     */
    private void informationMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_informationMenuItemActionPerformed
        // TODO add your handling code here:
        botInfo.setVisible(true);
        botInfo.setTitle("Bot Information for " + botName);
        botInfo.setResizable(false);
        botInfo.setLocationRelativeTo(null);
        botInfo.setSize(300, 350);
        botInfoNameLabel.setText(botName);
    }//GEN-LAST:event_informationMenuItemActionPerformed

    /**
     * When the user wants to display and edit the bots personality (Unimplemented)
     * @param evt 
     */
    private void personalityMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_personalityMenuItemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_personalityMenuItemActionPerformed

    /**
     * When the user wants to save the answers, what happens
     * @param evt 
     */
    private void answerSaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_answerSaveButtonActionPerformed
        // What to do when the Save button is pressed when the user is creating an answer
        addAnswer();
        creatingNewAnswer = false;
    }//GEN-LAST:event_answerSaveButtonActionPerformed

    /**
     * When the User wants to create a new answer
     * @param evt 
     */
    private void answerNewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_answerNewButtonActionPerformed
        // What to do when the New button is pressed when the user is creating an answer
        setEditAnswerFields(-1);
        editAnswer.setSize(255, 200);
        editAnswer.setResizable(false);
        editAnswer.setLocationRelativeTo(null);
        editAnswer.setVisible(true);
        editAnswer.setTitle("Edit Your Answer");
        creatingNewAnswer = true;
    }//GEN-LAST:event_answerNewButtonActionPerformed

    /**
     * When the user wants to cancel the editing of a answer
     * @param evt 
     */
    private void answerCancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_answerCancelButtonActionPerformed
        //What to do if the user presses cancel when the user in creating an answer
        editAnswer.setVisible(false);
        creatingNewAnswer = false;
    }//GEN-LAST:event_answerCancelButtonActionPerformed

    /**
     * When the user clicks the link Button, what happens
     * @param evt 
     */
    private void linkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_linkButtonActionPerformed
        // When items are meant to be linked
        linkItems();
    }//GEN-LAST:event_linkButtonActionPerformed

    /**
     * When the user clicks the unlink Button, what happens
     * @param evt 
     */
    private void unlinkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unlinkButtonActionPerformed
        // When items are meant to be unlinked
        unlinkItems();
    }//GEN-LAST:event_unlinkButtonActionPerformed

    /**
     * When the user wants to test run their bot, what happens
     * @param evt 
     */
    private void testRunMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testRunMenuItemActionPerformed
        // TODO add your handling code here:
        compileBot();
    }//GEN-LAST:event_testRunMenuItemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new GUI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel AnswerLabel;
    private javax.swing.JList AnswerList;
    private javax.swing.JMenuItem FAQMenuItem;
    private javax.swing.JMenu FileMenu;
    private javax.swing.JMenu Help;
    private javax.swing.JButton NewAnswer;
    private javax.swing.JButton NewQuestion;
    private javax.swing.JLabel QuestionLabel;
    private javax.swing.JList QuestionList;
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JButton answerCancelButton;
    private javax.swing.JTextField answerEditField;
    private javax.swing.JButton answerNewButton;
    private javax.swing.JButton answerSaveButton;
    private javax.swing.JFrame botInfo;
    private javax.swing.JLabel botInfoNameLabel;
    private javax.swing.JMenu botOptions;
    private javax.swing.JFrame botPersonality;
    private javax.swing.JButton cancelQuestionSave;
    private javax.swing.JMenuItem contactsMenuItem;
    private javax.swing.JMenuItem createBot;
    private javax.swing.JFrame editAnswer;
    private javax.swing.JButton editNewQuestionButton;
    private javax.swing.JFrame editQuestion;
    private javax.swing.JMenuItem exit;
    private javax.swing.JLabel infoLabel1;
    private javax.swing.JMenuItem informationMenuItem;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JTextField jTextField8;
    private javax.swing.JButton linkButton;
    private javax.swing.JMenuItem loadBot;
    private javax.swing.JMenuItem personalityMenuItem;
    private javax.swing.JTextField questionEditField;
    private javax.swing.JCheckBox responseCheckBox;
    private javax.swing.JMenuItem saveBot;
    private javax.swing.JButton saveQuestion;
    private javax.swing.JMenuItem testRunMenuItem;
    private javax.swing.JButton unlinkButton;
    private javax.swing.JMenuItem usageMenuItem;
    // End of variables declaration//GEN-END:variables
    
    //Start my Variables
    private ArrayList<Question> questions = new ArrayList<Question>();
    private ArrayList<Answer> answers = new ArrayList<Answer>();
    private ArrayList<String> questionStrings = new ArrayList<String>();
    private ArrayList<String> answerStrings = new ArrayList<String>();
    private File qFile = new File("Questions.txt"); //Default txt file
    private File aFile = new File("Answers.txt"); //Default txt file
    private String botName = "Charles"; //Default Value
    private byte lastFieldClicked = 0; //0 = None 1 = Question 2 = Answer
    private boolean creatingNewAnswer = false;
    private boolean creatingNewQuestion = false;
    private int lastSelectedAnswerIndex = -1;
    private int lastSelectedQuestionIndex = -1;
    private double version = 0.1;
    
    
    //Start my methods
    
    /**
     * Sets the fields when editing a question
     * @param index : The index of the question to edit, if the index is -1, set it to the defaults
     */
    private void setEditQuestionFields(int index){
        if(index == -1){
            //Default Values
            questionEditField.setText("Insert Question Here");
            //answerField.setText("Insert Answer Here");
            responseCheckBox.setEnabled(true);
            creatingNewQuestion = true;
            return;
        } 
        
        creatingNewQuestion = false;
        questionEditField.setText(questions.get(index).question);
        //answerField.setText(answers.get(questions.get(index).answerNode).answer);
        responseCheckBox.setSelected(questions.get(index).isResponse);
    }
    
    
    /**
     * Sets the fields when editing an answer
     * @param index : The index of the answer to edit, if the index is -1, set it to the defaults
     */
    private void setEditAnswerFields(int index){
        if(index == -1){
            answerEditField.setText("Insert Answer Here");
            creatingNewAnswer = true;
            return;
        }
        
        creatingNewAnswer = false;
        answerEditField.setText(answers.get(index).answer);
    }

    /**
     * Creates a bot based on the name given by the user
     */
    private void createBot(){
        String tempName = JOptionPane.showInputDialog(null, "Enter the Bot's Name", "Create Bot", 1);
        
        System.out.println(tempName);
        File aFile = new File(tempName + "Answers.txt");
        File qFile = new File(tempName + "Questions.txt");
        
        try{
            boolean aCreated = aFile.createNewFile();
            boolean qCreated = qFile.createNewFile();
        }catch(IOException ex){
            //File already exists
            
        }
        
        this.aFile = aFile;
        this.qFile = qFile;
        this.botName = tempName;
        loadData();
        
    }
    
    /**
     * Adds an answer to the arraylists, although only temporarily
     */
    private void addAnswer(){
        String answerName = answerEditField.getText();
        if(answerName != null && creatingNewAnswer){
            this.answers.add(new Answer(answerName));
            ArrayList<Integer> temp = new ArrayList<>();
            temp.add(-1);
            this.answers.get(this.answers.size()-1).nodes = temp;
            this.answerStrings.add(answers.size()-1 + ": " + this.answers.get(answers.size()-1).toString());
        }else{
            Answer temp = new Answer(answerName);
            temp.nodes = answers.get(lastSelectedAnswerIndex).nodes;
            this.answers.set(lastSelectedAnswerIndex, temp);
            this.answerStrings.set(lastSelectedAnswerIndex, lastSelectedAnswerIndex + ": " + temp.toString());
        }
        
        QuestionList.clearSelection();
        AnswerList.setListData(this.answerStrings.toArray());
        editAnswer.setVisible(false);
    }
    /**
     * Adds a question to the arraylists, although only temporarily
     */
    private void addQuestion(){
        String questionName = questionEditField.getText();
        if(questionName != null && creatingNewQuestion){
            Question temp = new Question(questionName, -1, responseCheckBox.isSelected());
            this.questions.add(temp);
            this.questionStrings.add(questions.size()-1 + ": " + temp.toString());
        }else{
            Question temp2 = new Question(questionName, 0, responseCheckBox.isSelected());
            temp2.answerNode = questions.get(lastSelectedQuestionIndex).answerNode;
            this.questions.set(lastSelectedQuestionIndex, temp2);
            this.questionStrings.set(lastSelectedQuestionIndex, lastSelectedQuestionIndex + ": " + temp2.toString());
            
        }
        
        AnswerList.clearSelection();
        QuestionList.setListData(this.questionStrings.toArray());
        editQuestion.setVisible(false);
    }
    
    /**
     * Loads data from a file
     */
    private void loadData(){
        TreeStructure data = new TreeStructure();
        data.loadData(qFile, aFile);
        this.answerStrings.clear();
        this.questionStrings.clear();
        
        this.answers = data.answers;
        this.questions = data.questions;
        
        for(int i = 0; i < answers.size(); i++){
            this.answerStrings.add(i + ": " + answers.get(i).toString());
        }
        for(int i = 0; i < questions.size(); i++){
            this.questionStrings.add(i + ": " + questions.get(i).toString());
        }
        
        QuestionList.setListData(questionStrings.toArray());
        AnswerList.setListData(answerStrings.toArray());
        
        this.setTitle("ChatBot Maker v " + version + " | Bot " + botName);
    }
    
        
    /**
     * Saves the Questions
     */
    private void saveQuestions(){
        PrintWriter pw;
        try{
            pw = new PrintWriter(new File(qFile.getPath()));
            
            for(int i = 0; i < questions.size(); i++){
                pw.append(questions.get(i).toString() + "\n");
            }
            
            pw.flush();
            pw.close();
            
        }catch(IOException ex){
            ex.printStackTrace();
        }
    }
    
    /**
     * Saves the Answers
     */
    private void saveAnswers(){
        PrintWriter pw;
        try{
            pw = new PrintWriter(new File(aFile.getPath()));
            
            for(int i = 0; i < answers.size(); i++){
                pw.append(answers.get(i).toString() + "\n");
            }
            
            pw.flush();
            pw.close();
        }catch(IOException ex){
            ex.printStackTrace();
        }
    }
    
    /**
     * Saves the bot
     */
    private void saveBot(){
        saveQuestions();
        saveAnswers();
    }
    
    
    /**
     * Links the Answer and Question depending on what is selected
     */
    private void linkItems(){
        
        if(lastFieldClicked == 0)return; //Nothing clicked
        if(QuestionList.getSelectedIndices().length < 1) return;
        if(AnswerList.getSelectedIndices().length < 1) return;
        
        if(lastFieldClicked == 1){
            //Last Field Clicked was an Question, so assign Question to an Answer
            int[] tempQuestions = QuestionList.getSelectedIndices();
            int[] tempAnswers = AnswerList.getSelectedIndices();
            
            for(int i = 0; i < tempAnswers.length; i++){
                
                String answerName = this.answers.get(tempAnswers[i]).answer;
                ArrayList<Integer> tempNodes = this.answers.get(tempAnswers[i]).nodes;
                
                for(int j = 0; j < tempQuestions.length; j++){
                    if(!tempNodes.contains(tempQuestions[j])){
                        tempNodes.add(tempQuestions[j]);
                        if(tempNodes.contains(-1)) tempNodes.remove(tempNodes.indexOf(-1));
                    }
                }
                
                this.answers.set(tempAnswers[i], new Answer(answerName, tempNodes));
                this.answerStrings.set(tempAnswers[i], tempAnswers[i] + ": " + this.answers.get(tempAnswers[i]).toString());
                
            }
            QuestionList.clearSelection();
            AnswerList.setListData(this.answerStrings.toArray());
            System.out.println("Assigned Answers!");
            lastFieldClicked = 0;
            return;
        }
        if(lastFieldClicked == 2){
            //Last Field Clicked was a Answer, so assign an Answer to a Question
            int[] tempQuestions = QuestionList.getSelectedIndices();
            int[] tempAnswers = AnswerList.getSelectedIndices();
            
            System.out.println(tempQuestions[0]);
            
            if(tempAnswers.length > 1) return; // Can't have more than one answer assigned to a question!
            
            for(int i = 0; i < tempQuestions.length; i++){
                questions.set(tempQuestions[i], new Question(questions.get(tempQuestions[i]).question, tempAnswers[0], false)); //Require them to state it's a root
                questionStrings.set(tempQuestions[i], tempQuestions[i] + ": " + questions.get(tempQuestions[i]).toString());
            }
            QuestionList.setListData(this.questionStrings.toArray());
            AnswerList.clearSelection();;
            System.out.println("Assigned Questions");
            lastFieldClicked = 0;
        }
    }
    
    /**
     * Unlinks the items depending on what is selected
     */
    private void unlinkItems(){
        if(lastFieldClicked == 0){return;} //Nothing has been clicked}
        if(QuestionList.getSelectedIndices().length < 1){return;}
        if(AnswerList.getSelectedIndices().length < 1){return;}
        
        int[] tempQuestions = QuestionList.getSelectedIndices();
        int[] tempAnswers = AnswerList.getSelectedIndices();
        if(lastFieldClicked == 1){
            //Last Field Clicked was a Question
            
            for(int i = 0; i < tempAnswers.length; i++){
                String answerName = this.answers.get(tempAnswers[i]).answer;
                ArrayList<Integer> nodes = this.answers.get(tempAnswers[i]).nodes;
                
                for(int j = 0; j < tempQuestions.length; j++){
                    if(nodes.contains(tempQuestions[j])){
                        nodes.remove(nodes.indexOf(tempQuestions[j]));
                    }
                    if(nodes.isEmpty()){
                        nodes.add(-1);
                    }
                }
                
                this.answers.set(tempAnswers[i], new Answer(answerName, nodes));
                this.answerStrings.set(tempAnswers[i], tempAnswers[i] + ": " + this.answers.get(tempAnswers[i]).toString());
            }
            
            QuestionList.clearSelection();
            AnswerList.setListData(this.answerStrings.toArray());
            System.out.println("Assigned Answers!");
            lastFieldClicked = 0;
            return;
            
        }
        if(lastFieldClicked == 2){
        //Last Field Clicked was an Answer.
            tempQuestions = QuestionList.getSelectedIndices();
            tempAnswers = AnswerList.getSelectedIndices();
            
            if(tempAnswers.length > 1) return; // Can't have more than one answer assigned to a question!
            if(tempAnswers.length < 1) return;
            if(tempQuestions.length < 1) return;
            
            for(int i = 0; i < tempQuestions.length; i++){
                if(questions.get(tempQuestions[i]).answerNode == tempAnswers[0]){
                    questions.set(tempQuestions[i], new Question(questions.get(tempQuestions[i]).question, -1, false)); //Require them to state it's a root
                }
                questionStrings.set(tempQuestions[i], tempQuestions[i] + ": " + questions.get(tempQuestions[i]).toString());
            }
            QuestionList.setListData(this.questionStrings.toArray());
            AnswerList.clearSelection();;
            System.out.println("Assigned Questions");
            lastFieldClicked = 0;
        }
    }
    
    /**
     * Compiles the bot and runs in a separate JFrame
     */
    void compileBot(){
        saveBot();
        BotCompiler b = new BotCompiler(qFile, aFile, botName);
        b.setLocationRelativeTo(this);
        b.setLocation(this.getLocation().x+this.getWidth()+20, this.getLocation().y);
        b.setTitle("Bot Compiler v " + version + " | Bot " + botName);
        b.setResizable(false);
        b.setSize(500, 500);
        b.setVisible(true);
        b.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
    }
}
