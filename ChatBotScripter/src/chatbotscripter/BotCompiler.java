/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package chatbotscripter;

import ChatBot_Core.ChatBot_CoreCharacteristics;
import ChatBot_Descriptors.Gender;
import ChatBot_Descriptors.MentalStatus;
import ChatBot_ReponseCore.ChatBot_InputOutput;
import java.io.File;
import java.util.ArrayList;

/**
 *
 * @author Garrett
 */
public class BotCompiler extends javax.swing.JFrame implements ChatbotListener{

    /**
     * Creates new form BotCompiler
     */
    public BotCompiler() {
        initComponents();
    }
    
    /**
     * Constructor to create BotCompiler from a file
     * @param qFile : The question file to use
     * @param aFile : The answer file to use
     * @param botName : The bots name
     */
    public BotCompiler(File qFile, File aFile, String botName){
        initComponents();
        loadData(qFile, aFile);
        this.botName = botName;
        compileStringList.setListData(chatLog.toArray());
        ChatbotHandler.addListener(this);
        ChatBot_CoreCharacteristics chatbotCore = new ChatBot_CoreCharacteristics("Charles", 25, "01/16/1966", Gender.MALE, MentalStatus.ORIENTED);
        ChatBot_InputOutput newChatbotInputOutput = new ChatBot_InputOutput(chatbotCore);
        newChatbotInputOutput.setQuestionHandler(this);
        Thread t = new Thread(newChatbotInputOutput);
        t.start();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        compileStringList = new javax.swing.JList();
        userInputField = new javax.swing.JTextField();
        sendButton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(500, 500));

        compileStringList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(compileStringList);

        userInputField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userInputFieldActionPerformed(evt);
            }
        });
        userInputField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                userInputFieldKeyPressed(evt);
            }
        });

        sendButton.setText("Send");
        sendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendButtonActionPerformed(evt);
            }
        });

        jMenu1.setText("File");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("Reload");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(userInputField, javax.swing.GroupLayout.DEFAULT_SIZE, 349, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(sendButton))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 319, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(userInputField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sendButton))
                .addContainerGap(27, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * When the user uses the input field
     * @param evt 
     */
    private void userInputFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userInputFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_userInputFieldActionPerformed

    /**
     * When the user decides to send their question or response
     * @param evt 
     */
    private void sendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendButtonActionPerformed
        // TODO add your handling code here:
//        queryQuestion(userInputField.getText());
//        userInputField.setText("");
        InputHandler.sendUserInput(userInputField.getText());
        userInputField.setText("");
    }//GEN-LAST:event_sendButtonActionPerformed

    /**
     * When the user decides to reload their data
     * @param evt 
     */
    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        reloadData();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    /**
     * What happens when the user presses a key in the input field, currently will
     * send the message if the user hits enter
     * @param evt 
     */
    private void userInputFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_userInputFieldKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER){
            InputHandler.sendUserInput(userInputField.getText());
            userInputField.setText("");
        }
    }//GEN-LAST:event_userInputFieldKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BotCompiler.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BotCompiler.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BotCompiler.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BotCompiler.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new BotCompiler().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList compileStringList;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton sendButton;
    private javax.swing.JTextField userInputField;
    // End of variables declaration//GEN-END:variables

    //My Variables
    File aFile;
    File qFile;
    TreeStructure data = new TreeStructure();
    ArrayList<String> chatLog = new ArrayList<String>();
    String botName = "Default";
    GUI mainGUI;
    
    //My Methods
    
    /**
     * Loads the data from a specific file
     * @param qFile : File to get the questions from
     * @param aFile : File to get the answers from
     */
    private void loadData(File qFile, File aFile){
        data.loadData(qFile, aFile);
        this.aFile = aFile;
        this.qFile = qFile;
        
    }
    
    /**
     * Reloads the data from the files
     */
    private void reloadData(){
        data.loadData(this.qFile, this.aFile);
    }
    
    /**
     * Clears the chatlog
     */
    private void clearChatLog(){
        chatLog = new ArrayList<String>();
    }
    
    /**
     * Query a specific question
     * @param s 
     */
    public void queryQuestion(String s){
        String result = data.askQuestion(s);
        //chatLog.add("You: " + s);
        chatLog.add(botName + ": " + result);
        compileStringList.setListData(chatLog.toArray());
        refreshList();
        
    }
    
    /**
     * Adds a response from the bot
     * @param s : The response
     */
    public void addBotResponse(String s){
        chatLog.add(botName + ": " + s);
    }
    
    /**
     * Adds a human response to the log
     * @param s : The response
     */
    public void addHumanResponse(String s){
        chatLog.add("You: " + s);
    }
    
    /**
     * Refresh the list with the data 
     */
    public void refreshList(){
        compileStringList.setListData(chatLog.toArray());
    }

    
    /**
     * ChatbotListener methods
     * 
     */

    /**
     * This currently does nothing
     * @param s : Message
     * @param source : Where it came from
     */
    @Override
    public void notify(String s, int source) {
        //throw new UnsupportedOperationException("Not supported yet.");
    }

    /**
     * Currently Does nothing, yet
     * @param errorCode : ErrorCode received 
     */
    @Override
    public void onErrorRecieved(int errorCode) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    /**
     * When a question is asked from the User
     * @param s : The question
     */
    @Override
    public void onQuestionAsked(String s) {
        addHumanResponse(s);
        refreshList();
    }

    /**
     * When an answer is received from the bot
     * @param s : The answer
     */
    @Override
    public void onAnswerRecieved(String s) {
        addBotResponse(s);
        refreshList();
    }

    /**
     * When the bots name is changed
     * @param s : The Name
     */
    @Override
    public void onNameChanged(String s) {
        botName = s;
    }

    /**
     * When the application has been told to exit cleanly
     * @param code : Exit code
     */
    @Override
    public void onExit(int code) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    /**
     * When the chat bot is ready to compile, everything is good to go
     */
    @Override
    public void onChatbotReady() {
        System.out.println("I'm starting compiling");
    }

}
